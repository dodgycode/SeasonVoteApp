@page "/EditTier/{tierId}"
@inject HttpClient Http
@inject NavigationManager NavManager

<h2>Edit Tier</h2>

@if (currentTier != null)
{
    <EditForm Model="@currentTier">

        <MatTextField Label="Tier Name" @bind-Value="currentTier.Name" />
        <MatNumericUpDownField Label="Number of tracks to be selected" @bind-Value="currentTier.NumberToBeSelectedFromTier" />

    </EditForm>
    <MatDivider></MatDivider>
   <MatTable Items="@currentTier.Tracks" ShowPaging="false" PageSize="100">
       <MatTableHeader>
           <th>Circuit Name</th>
           <th>Layout</th>
           <th>Track Type</th>
           <th>Availability</th>
       </MatTableHeader>
       <MatTableRow>
           <td>@context.Name</td>
           <td>@context.VariantName</td>
           <td>@context.TrackType</td>
           <td>@context.Availability</td>
       </MatTableRow>
   </MatTable>

    @if (trackNames != null)
    {
        @if (dialogIsOpen)
        {
            <MatAutocompleteList Items="@trackNames" @bind-Value="newTrackName" TItem="string" Label="Select a track" @onblur="LoadVariants" FullWidth="true"></MatAutocompleteList>
            <br />
            @if (variants != null)
            {
                <MatSelect @bind-Value="newVariantName" FullWidth="true" Label="Select a layout">
                    @foreach (var variant in variants)
                                    {
                        <MatOptionString Value="@variant.Name">@variant.Name</MatOptionString>
                                    }
                </MatSelect>
            }
            <br />
            <MatButton @onclick="Cancel">Cancel</MatButton>
            <MatButton Raised="true" OnClick="@AddTrack">Add</MatButton>
        }
        else
        {
            <MatButton @onclick="() => dialogIsOpen = true">Add Track</MatButton>
        }
    }
}

@code {
    [Parameter]
    public string TierId { get; set; }
    private TierViewModel currentTier;
    private List<TrackViewModel> tracks;
    private List<string> trackNames;
    private List<TrackVariantViewModel> variants;
    private bool dialogIsOpen = false;
    string newTrackName;
    string newVariantName;

    protected override async Task OnInitializedAsync()
    {
        await GetTier();
        await GetTrackList();
    }

    private async Task GetTier()
    {
        try
        {
            currentTier = await Http.GetFromJsonAsync<TierViewModel>($"/api/Tier/GetById/{TierId}");
        }
        catch (Exception ex)
        {
            currentTier = null;
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task GetTrackList()
    {
        try
        {
            tracks = await Http.GetFromJsonAsync<List<TrackViewModel>>("/api/Track/GetAll");
            trackNames = tracks.Select(t => t.Name).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private void LoadVariants()
    {
        var track = tracks.FirstOrDefault(t => t.Name == newTrackName);
        variants = track?.Variants;
    }

    private async Task AddTrack()
    {
        try
        {
            var newTrack = await Http.GetFromJsonAsync<ScheduleTrackViewModel>($"/api/Track/GetScheduleTrackByName/{newTrackName}");
            var variant = tracks.FirstOrDefault(t => t.Name == newTrackName).Variants.FirstOrDefault(v => v.Name == newVariantName);
            newTrack.VariantName = variant.Name;
            newTrack.TrackType = variant.TrackType;
            currentTier.Tracks.Add(newTrack);
            trackNames.Remove(newTrackName);
            await Http.PostAsJsonAsync("/api/Tier/Save", currentTier);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            dialogIsOpen = false;
            newTrackName = null;
            newVariantName = null;
            variants = null;
        }
    }

    private void Cancel()
    {
        dialogIsOpen = false;
        newTrackName = null;
        newVariantName = null;
        variants = null;
    }

}

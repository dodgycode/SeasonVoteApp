@page "/season"
@inject HttpClient Http

<h2>Current Season</h2>
@if (hasLoaded)
{
    @if (currentSeason != null)
    {
        <p>Current Season is @currentSeason.Name</p>
        <MatButton Raised="true" OnClick="(e => { dialogIsOpen = true; })">Complete Season</MatButton>

        <MatDialog @bind-IsOpen="@dialogIsOpen">
            <MatDialogTitle>Complete @currentSeason.Name?</MatDialogTitle>
            <MatDialogContent>
                <p>
                    Are you sure you want to complete @currentSeason.Name?
                    Doing so will mean you can no longer configure series associated with the season.
                    It also means you can no longer accept track voting for this season.
                </p>
                <p>Please continue only if you are finished with this season and ready to start planning for the next season.</p>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="@(e => { dialogIsOpen = false; })">Cancel</MatButton>
                <MatButton OnClick="@CompleteSeason">OK</MatButton>
            </MatDialogActions>
        </MatDialog>
    }
    else
    {
        <p>No season is currently active</p>
        <MatButtonLink href="addseason">Add a new Season</MatButtonLink>
    }
}
else
{
    <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Medium" />
}


@code {
    private SeasonViewModel currentSeason;
    private bool hasLoaded = false;
    private bool dialogIsOpen = false;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentSeason();
    }

    private async Task CompleteSeason()
    {
        try
        {
            await Http.PostAsJsonAsync("/api/Season/Complete", currentSeason.Id);
            await GetCurrentSeason();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            dialogIsOpen = false;
        }
    }

    private async Task GetCurrentSeason()
    {

        try
        {
            currentSeason = await Http.GetFromJsonAsync<SeasonViewModel>("/api/Season/GetCurrent");
        }
        catch (Exception ex)
        {
            currentSeason = null;
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            hasLoaded = true;
        }
    }

}

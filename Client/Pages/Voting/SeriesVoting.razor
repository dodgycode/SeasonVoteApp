@page "/SeriesVoting/{seriesId}"
@inject HttpClient Http
@inject NavigationManager NavManager

@if (currentVoting == null)
{
    <h4>Registration</h4>
    <p>Please enter your name exactly as it appears on your iRacing account.</p>
    <MatTextField Label="iRacing Account Name" @bind-Value="voterName" />
    <MatButton @onclick="CreateBallot">Begin Voting!</MatButton>
}
else
{
    @foreach (var tier in currentVoting.Tiers)
    {
        <TierVoting Tier="@tier"/>
        <br />
    }
}

@code {
    [Parameter]
    public string SeriesId { get; set; }
    private string voterName;
    private SeriesVotingViewModel currentVoting;
    private bool showTooManySelectionsError = false;
    private string tooManySeletionsMessage;

    //protected override async Task OnInitializedAsync()
    //{
    //    await GetCurrentSeries();
    //}

    private async Task CreateBallot()
    {
        try
        {
            currentVoting = await Http.GetJsonAsync<SeriesVotingViewModel>($"/api/Voting/CreateBallot/{SeriesId}/{voterName}");
        }
        catch (Exception ex)
        {
            currentVoting = null;
            Console.WriteLine(ex.ToString());
        }
    }

    private void ValidateSelections(TierVotingViewModel tier, TrackVotingViewModel track)
    {
        var selectedTracks = tier.Tracks.Where(t => t.Order != null);
        if (selectedTracks.Count() >= tier.Rules.NumberToBeVotedOn)
        {
            // Already selected as many as possible
            tooManySeletionsMessage = $"You cannot select more than {tier.Rules.NumberToBeVotedOn} tracks for {tier.Name}";
            showTooManySelectionsError = true;
        }
        else
        {
            track.Order = 1;
        }

    }
}

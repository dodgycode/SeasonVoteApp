@page "/SeriesVoting/{seriesId}"
@inject HttpClient Http
@inject NavigationManager NavManager

@if (currentVoting == null)
{
    <h4>Registration</h4>
    <p>Please enter your name exactly as it appears on your iRacing account.</p>
    <MatTextField Label="iRacing Account Name" @bind-Value="voterName" />
    <MatButton @onclick="CreateBallot">Begin Voting!</MatButton>
}
else
{
    @foreach (var tier in currentVoting.Tiers.OrderBy(t => t.Order))
    {
        <TierVoting Tier="@tier" />
        <br />
    } 
    @if (ReadyToSubmit())
    {
        <MatButton @onclick="Submit">Submit your vote(s)!</MatButton>
    }
}

@code {
    [Parameter]
    public string SeriesId { get; set; }
    private string voterName;
    private SeriesVotingViewModel currentVoting;

    private async Task CreateBallot()
    {
        try
        {
            currentVoting = await Http.GetJsonAsync<SeriesVotingViewModel>($"/api/Voting/CreateBallot/{SeriesId}/{voterName}");
        }
        catch (Exception ex)
        {
            currentVoting = null;
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task Submit()
    {
        try
        {
            await Http.PostAsJsonAsync<SeriesVotingViewModel>($"/api/Voting/SubmitVote", currentVoting);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private bool ReadyToSubmit()
    {
        var ready = currentVoting.Tiers.All(t => t.VotingComplete);
        return ready;
    }

}

@page "/currentseries"
@inject HttpClient Http;
@inject NavigationManager NavManager;

<h2>Current Series</h2>
@if (hasLoaded)
{
    @if (currentSeries != null)
    {
        foreach (var series in currentSeries)
        {
            <MatCard>
                <MatCardContent @onclick="() => EditSeries(series)">
                    <MatBlazor.MatHeadline6>@series.Name</MatBlazor.MatHeadline6>
                    <MatSubtitle2>@series.Tiers.Count Tiers</MatSubtitle2>
                    <MatBody1>@series.Description</MatBody1>
                </MatCardContent>
            </MatCard>
        }
    }
    <br />
    <MatButtonLink href="addseries">Add a new Series</MatButtonLink>
}
else
{
    <LoadingSpinner/>
}


@code {
    private List<ScheduleSeriesViewModel> currentSeries;
    private bool hasLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentSeries();
    }

    private async Task GetCurrentSeries()
    {

        try
        {
            currentSeries = await Http.GetFromJsonAsync<List<ScheduleSeriesViewModel>>("/api/Series/GetCurrent");
        }
        catch (Exception ex)
        {
            currentSeries = null;
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            hasLoaded = true;
        }
    }

    private void EditSeries(ScheduleSeriesViewModel series)
    {
        NavManager.NavigateTo($"/EditSeries/{series.Id}");
    }
}

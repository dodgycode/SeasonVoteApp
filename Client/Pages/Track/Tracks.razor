@page "/tracks"
@inject HttpClient Http


<h2>Tracks</h2>
@if (hasLoaded)
{@if (tracks != null)
    {
        @*<MatTable Items="@tracks" ShowPaging="false">
            <MatTableHeader>
                <th>Circuit Name</th>
                <th>Availability</th>
                <th>Layouts</th>
                <th>Details</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.Name</td>
                <td>@context.Availability</td>
                <td>@context.NumberOfVariants</td>
                <td><a href="@context.Url">Link</a></td>
            </MatTableRow>
        </MatTable>*@

        foreach (var track in tracks)
        {
            <MatCard>
                <MatCardContent>
                    <MatBlazor.MatHeadline6>@track.Name</MatBlazor.MatHeadline6>
                    <MatSubtitle1>@track.Availability</MatSubtitle1>
                    <MatSubtitle2>@track.NumberOfVariants layouts</MatSubtitle2>
                </MatCardContent>
            </MatCard>
        }
    }
    else
    {
        <h1>No tracks exist</h1>
    }
}
else
{
<MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Medium" />
}




@code {
    private TrackViewModel[] tracks;
    private bool hasLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        await GetTracks();
    }

    private async Task GetTracks()
    {

        try
        {
            tracks = await Http.GetFromJsonAsync<TrackViewModel[]>("/api/Track/GetAll");
        }
        catch (Exception ex)
        {
            tracks = null;
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            hasLoaded = true;
        }
    }
}
